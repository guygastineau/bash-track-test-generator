#!/usr/bin/env ruby

require_relative './lib/generator_class'
require_relative './lib/module_lib'

class TestGenerator
  include FetchFile
end

def usage_banner
  puts <<~INFO
    Usage: ./#{File.basename(__FILE__)} <exercise-slug> [override]
      exercise-slug:   the slug of the exercise you want to update, ex: 'bob'
      override:        adds extra tests not included in the problem-specification file, requires a custom JSON file
  INFO

  exit
end

# Grab the slug from ARGV
slug = ARGV[0]

usage_banner unless slug

# Grab ARGV[1] if it exists
override = 1 if ARGV[1] == "override"

# Instantaite our class object with the input
new_test = TestGenerator.new(slug)

# Lets make some variables for handling paths
base_path, file_ext = "./exercises/#{slug}/", "#{new_test.converted_slug}"

# Load the template into the object
new_test.template = File.read("#{base_path}template.erb")

# Load the override into the existing json
new_test.load_override("#{base_path}override.json") if override == 1

# Lets grab the example.sh unless it exists already renamed
unless File.file?("#{base_path}#{file_ext}.sh")
  new_test.get_example(slug)
end

# If there is already a test here lets save it to 'old_test.sh'
if File.file?("#{base_path}#{file_ext}_test.sh")
  File.rename("#{base_path}#{file_ext}_test.sh", "#{base_path}old_test.sh")
end

begin
  new_test.generate
rescue
  puts "There seems to have been a problem.
    Please check your template file for errors."
  exit 1
end

puts "Everything seems to have worked. Please verify that your test
  has been generated properly and check the example.sh against it."

exit
